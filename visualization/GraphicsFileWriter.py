#!/usr/bin/python3
"""
This module provides the models that will allow for the conversion
of the visualization models that are projected in the client with the
dc.js library to R using ggplot2 and python using matplotlib
"""


from abc import ABCMeta, abstractmethod
import json

class AbstractGraphicsFileWriter(metaclass=ABCMeta):

    crossfilterX = 'key'
    crossfilterY = 'value'

    def __init__(self, data, xAxis, yAxis, jsChartType):
        """
        Parameters
        -----------------------------------
        data: json encoded data that is to be visualized
        xAxis: The name of the xAxis
        yAxis: The name of the yAxis
        jsChartType: The dc js model that is to be translated
        """
        self.data = data
        self.xAxis = xAxis
        self.yAxis = yAxis
        # The name of the file
        self.filename = None
        # The content that is to be written in the file
        self.fileContent = ''
        # The data in the x axis
        self.x = [i[AbstractGraphicsFileWriter.crossfilterX] for i in self.data]
        # The data in the y axis
        self.y = [i[AbstractGraphicsFileWriter.crossfilterY] for i in self.data]
        # Mapping from graph type to function that will be called
        self.graphFunctionRange = {
            'barPlot': self._addBarPlot,
            'boxPlot': self._addBoxPlot,
            'histogram': self._addHistogram,
            'linePlot': self._addLinePlot,
            'piePlot': self._addPiePlot,
            'scatter': self._addScatterPlot,
            'stackedArea': self._addStackedPlot
        }

        self.jsChartConversion = {
            'pie': 'piePlot',
            'bar': 'barPlot',
            'box': 'boxPlot',
            'histogram': 'histogram',
            'bubble': 'scatter',
            'stackedarea': 'stackedArea'
        }
        try:
            self.chartFunction = self.graphFunctionRange[jsChartType]
        except KeyError:
            print('KeyError: Chart must be in '+ ' '.join(list(self.graphFunctionRange.keys())))

    @abstractmethod
    def _initializeFileContent(self):
        pass

    @abstractmethod
    def write(self, filename, toFile=True):
        pass

    @abstractmethod
    def _addScatterPlot(self):
        pass

    @abstractmethod
    def _addLinePlot(self):
        pass

    @abstractmethod
    def _addBarPlot(self):
        pass

    @abstractmethod
    def _addHistogram(self):
        pass

    @abstractmethod
    def _addBoxPlot(self):
        pass

    @abstractmethod
    def _addPiePlot(self):
        pass

    @abstractmethod
    def _addStackedPlot(self):
        pass


class RGraphicsFileWriter(AbstractGraphicsFileWriter):
    """
    This class writes to a file the ggplot2 representation
    of the visualization model that is being shown in the client
    """

    def __init__(self, data, xAxis, yAxis, chartType):
        """
        """
        AbstractGraphicsFileWriter.__init__(self, data, xAxis, yAxis, chartType)
        self._initializeFileContent()

    def write(self, filename, toFile=True):
        """
        """
        self.filename = filename

        if self.filename is not None :
            self.chartFunction()
            if toFile:
                with open('{}.R'.format(self.filename), 'w') as f:
                    f.write(self.fileContent)
        else:
            raise Exception('filename can\'t be None')

    def _initializeFileContent(self):
        self.fileContent = """#Script generated by visualize platform
install.packages("ggplot2") # The graphing library
install.packages("gcookbook") #Decorating graphs
install.packages("xlsx") # To process excel files
install.packages("gdata") # To process older excel files


library(ggplot2) # The graphing library
library(gcookbook)
library(xlsx) # To process excel files
library(gdata) # To process older excel files
        """

    def _addScatterPlot(self):
        self.fileContent += """# A scatter plot with labels
qplot(data$Year, data$Number.of.Crimes) + geom_text(aes(label=data$Number.of.Crimes),vjust=-0.2)

        """

    def _addLinePlot(self):
        self.fileContent += """# A line plot
qplot(data$Year, data$Number.of.Crimes, geom=c("line")) + geom_text(aes(label=data$Number.of.Crimes), vjust=-0.2)
        """

    def _addBarPlot(self):
        self.fileContent += """# A bar plot
qplot(data$Year, data$Number.of.Crimes, geom="bar", stat="identity") + geom_text(aes(label=data$Number.of.Crimes), vjust=-0.2)"""

    def _addHistogram(self):
        self.fileContent += """# A histogram
qplot(data$Year)
        """

    def _addBoxPlot(self):
        self.fileContent += """# A Box plot
qplot(data2$Women, data2$Men, geom="boxplot")
"""

    def _addPiePlot(self):
        self.fileContent += """# A pie plot
pie(data$Number.of.Crimes, labels=c(data$Year))
"""

    def _addStackedPlot(self):
        pass


class PythonGraphicsFileWriter(AbstractGraphicsFileWriter):
    """
    docstring for PythonGraphicsFileWriter
    """

    def __init__(self, data, xAxis, yAxis, chartType):
        AbstractGraphicsFileWriter.__init__(self, data, xAxis, yAxis, chartType)
        self._initializeFileContent()

    def write(self, filename, toFile=True):
        assert type(filename) == str, 'filename must be a str instance'
        self.filename = filename

        if self.filename is not None:
            self.chartFunction()
            if toFile:
                with open('{}.py'.format(self.filename), 'w') as f:
                    f.write(self.fileContent)
        else:
            raise Exception('filename can\'t be None')

    def _initializeFileContent(self):
        self.fileContent += """# Script generated by visualize platform
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import numpy as np
from pylab import *
        """

    def _addScatterPlot(self):
        self.fileContent += """# Add a scatter plot
fig, ax = plt.subplots()
ax.scatter({},{})
plt.xlabel('{}')
plt.ylabel('{}')
plt.show()
        """.format(self.x, self.y, self.xAxis, self.yAxis)

    def _addLinePlot(self):
        self.fileContent += """# Add a line plot
plt.plot({}, {})
plt.xlabel('{}')
plt.ylabel('{}')
plt.show()
        """.format(self.x, self.y, self.xAxis, self.yAxis)

    def _addBarPlot(self):
        self.fileContent += """# Add a bar plot
ind = np.arange(len({}))
width = 0.35
p1 = plt.bar(ind, {}, width)
plt.xlabel('{}')
plt.ylabel('{}')
plt.xticks(ind, {})
plt.show()
        """.format(self.x, self.y, self.xAxis, self.yAxis, self.x)

    def _addHistogram(self):
        self.fileContent += """# Add a histogram
plt.hist({}, len({}), normed=1)
plt.show()
        """.format(self.y, self.x)

    def _addBoxPlot(self):
        self.fileContent += """
z = self.x + self.y
boxplot(z)
plt.xlabel('{}')
plt.ylabel('{}')
plt.show()
        """.format(self.xAxis, self.yAxis)

    def _addPiePlot(self):
        self.fileContent += """# Add a pie plot
# Get the total for the y axis
total = np.sum({})
sizes = [(i/total) * 100 for i in {}]
labels = ' '.join([str(i) for i in {}]).split(' ')
explode = [0 for i in range(len({}))]
plt.pie(sizes, explode=explode, labels=labels)
plt.show()
        """.format(self.y, self.y, self.x, self.x)

    def _addStackedPlot(self):
        self.fileContent += """
ind = np.arange(len({}))
width = 0.35
p1 = plt.bar(ind, {}, width)
p2 = plt.bar(ind, {}, width, color='y', bottom={})
plt.show()
        """.format(self.x, self.x, self.y, self.x)
