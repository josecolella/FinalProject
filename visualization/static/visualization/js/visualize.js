/**
 * Created by josecolella on 09/06/2014.
 */
'use strict';

//Represents the encapsulation of the visualize module
var visualize = {
    width: 800,
    height: 400,
    inputData: null,
    config: {
        'x': null,
        'y': null
    },
    cf: null,
    pieChart : function(selector) {

        var chartSelector = selector+"-chart";
        $("#chart")
            .attr('class', chartSelector)
            .css({
                'height': '30em',
                'margin-top': ''
            });

        var pieChart = dc.pieChart("."+chartSelector);


        var dimension= visualize.cf.dimension(function(row) { return row[visualize.config.x];});

        var group;
        if (visualize.config.x !== visualize.config.y) {
            group = dimension.group().reduceSum(function(row) {
                return row[visualize.config.y];
            });
        } else {
            group = dimension.group().reduceCount(function(row) {
                return row[visualize.config.y];
            });
        }

        pieChart.width(visualize.width)
            .height(visualize.height)
            .dimension(dimension)
            .group(group)
            .innerRadius(0)
            .title(function(p) {

                return p.value;
            })
            .renderTitle(true);
        dc.renderAll();


    },
    barChart: function(selector) {
        var chartSelector = selector+"-chart";
        $("#chart")
            .attr('class', chartSelector)
            .css({
                'height': '30em',
                'margin-top': ''
            });

        //Defining the x scale is mandatory
        var barChart = dc.barChart("."+chartSelector);


        var dimension= visualize.cf.dimension(function(row) { return row[visualize.config.x];});

        var group;
        if (visualize.config.x !== visualize.config.y) {
            group = dimension.group().reduceSum(function(row) {
                return row[visualize.config.y];
            });
        } else {
            group = dimension.group().reduceCount(function(row) {
                return row[visualize.config.y];
            });
        }


        var groupByValue = function(d) {
            return d.value;
        };
        var groupByKey = function(d) {
            return d.key;
        };

        var ordinalX = $.map(group.all(), function(item, index) {
            return item.key;
        });
        var linearY = d3.extent(group.all(), groupByValue);

        barChart.width(visualize.width)
            .height(visualize.height)
            .margins({top: 10, right: 10, bottom: 20, left: 40})
            .dimension(dimension)
            .group(group)
            .x(d3.scale.ordinal().domain(ordinalX))
            .xUnits(dc.units.ordinal) //Set or get the xUnits function
            .y(d3.scale.linear().domain(linearY)) //Get or set the y scale. y scale is typically automatically generated by the chart implementation.
            .brushOn(true)
            .elasticY(true) //Turn on/off elastic y axis
            .centerBar(true); //Whether the bar chart will render each bar centered around the data position on x axis


        dc.renderAll();

    },
    boxChart: function(selector) {

    },
    curveChart: function(selector) {

    },
    histogram: function(selector) {

    },
    lineChart: function(selector) { //Generates a line Chart
        var chartSelector = selector+"-chart";
        $("#chart")
            .attr('class', chartSelector)
            .css({
                'height': '30em',
                'margin-top': ''
            });

        //Defining the x scale is mandatory
        var lineChart = dc.lineChart("."+chartSelector);


        var dimension= visualize.cf.dimension(function(row) { return row[visualize.config.x];});

        var group;
        if (visualize.config.x !== visualize.config.y) {
            group = dimension.group().reduceSum(function(row) {
                return row[visualize.config.y];
            });
        } else {
            group = dimension.group().reduceCount(function(row) {
                return row[visualize.config.y];
            });
        }

        console.log('HELLO');
        console.log(group.all());
        var groupByValue = function(d) {
            return d.value;
        };
        var groupByKey = function(d) {
            return d.key;
        };

        var linearX = d3.extent(group.all(), groupByKey);
        var linearY = d3.extent(group.all(), groupByValue);

        console.log(linearX);
        console.log(linearY);

        lineChart.width(visualize.width)
            .height(visualize.height)
            .margins({top: 10, right: 10, bottom: 20, left: 40})
            .dimension(dimension)
            .group(group)
            .x(d3.scale.linear().domain(linearX))
            .renderHorizontalGridLines(true)
            .brushOn(true)
            .elasticY(true) //Turn on/off elastic y axis
            .xAxis().tickFormat(d3.format("d"));


        dc.renderAll();
    },
    bubbleChart: function(selector) { //Generate a bubble chart



        var chartSelector = selector+"-chart";
        $("#chart")
            .attr('class', chartSelector)
            .css({
                'height': '30em',
                'margin-top': ''
            });

        //Defining the x scale is mandatory
        var bubbleChart = dc.bubbleChart("."+chartSelector);


        var dimension= visualize.cf.dimension(function(row) { return row[visualize.config.x];});

        var group;
        if (visualize.config.x !== visualize.config.y) {
            group = dimension.group().reduceSum(function(row) {
                return row[visualize.config.y];
            });
        } else {
            group = dimension.group().reduceCount(function(row) {
                return row[visualize.config.y];
            });
        }


        var groupByValue = function(d) {
            return d.value;
        };
        var groupByKey = function(d) {
            return d.key;
        };

        var linearX = d3.extent(group.all(), groupByKey);
        var linearY = d3.extent(group.all(), groupByValue);


        console.log(linearX);
        console.log(linearY);

        bubbleChart.width(visualize.width)
                    .height(visualize.height)
                    .margins({top: 30, right: 50, bottom: 30, left: 60})
                    .dimension(dimension)
                    .group(group)
                    .colors(d3.scale.category10())
                    .keyAccessor(function (p) {
                        return parseInt(p.key);
                    })
                    .valueAccessor(function (p) {
                        return p.value;
                    })
                    .radiusValueAccessor(function (p) {

                        return p.value;
                    })
                    .x(d3.scale.linear().domain(linearX))//Get or set the x scale.
                    .r(d3.scale.linear().domain(linearY))
                    .y(d3.scale.linear().domain(linearY)) //Get or set the y scale. y scale is typically automatically generated by the chart implementation.

                    .minRadiusWithLabel(15)
                    .elasticY(true)
                    .yAxisPadding(100)
                    .elasticX(true)
                    .xAxisPadding(200)
                    .maxBubbleRelativeSize(0.05)
                    .xAxis().tickFormat(d3.format("d"));
//                    .renderLabel(true)
//                    .renderTitle(true);

        dc.renderAll();
    },
    stackedChart: function(selector) {

    }

};





